#!/bin/sh
# dnssec-reverb: DNSSEC key management tool
#
# @home: https://github.com/northox/dnssec-reverb
# @license: Simplified BSD
# Copyright (c) 2009-2013 Kazunori Fujiwara <fujiwara@wide.ad.jp>.
# Copyright (c) 2017 Danny Fullerton <danny@mantor.org>. 

PROG=`basename $0`

DIR=`dirname $0`
CONFIGFILE="$DIR/dnssec-reverb.conf"

MASTERDIR="/var/nsd/zones/master"

keygen="/usr/local/bin/ldns-keygen"
signzone="/usr/local/bin/ldns-signzone"
dsfromkey="/usr/local/bin/ldns-key2ds -n"

KSK_PARAM="-a ECDSAP256SHA256 -k"
ZSK_PARAM="-a ECDSAP256SHA256 "
SIGN_PARAM="-n"
DS_PARAM="-2"
PRESERVE_REMOVED_KEY="YES"

FATAL_MAIL=""

NOW=`date +%Y%m%d%H%M%S`

if [ -s $CONFIGFILE ]; then
	. $CONFIGFILE
fi

if [ "$1" = "" -a "$DEFAULT_ACTION" != "" ]; then
	echo "Doing $DEFAULT_ACTION"
	set $DEFAULT_ACTION
	echo $1 $2 $3
fi

if [ "$CONFIGDIR" = "" ]; then
	CONFIGDIR="$MASTERDIR/dnssec-reverb-db"
fi
if [ "$KEYDIR" = "" ]; then
	KEYDIR="$CONFIGDIR/keydir"
fi
if [ "$KEYBACKUPDIR" = "" ]; then
	KEYBACKUPDIR="$CONFIGDIR/backup"
fi

LOCKF=""

HEAD_ZSKNAME="zsk-"
HEAD_KSKNAME="ksk-"
HEAD_ZSSNAME="zss-"
HEAD_ZSRNAME="zsr-"            # Removed ZSK
HEAD_KSSNAME="kss-"

NEED_RELOAD=0

# setup
if [ ! -d $CONFIGDIR ]; then
	mkdir -p $CONFIGDIR
fi
if [ ! -d $KEYBACKUPDIR ]; then
	mkdir -p $KEYBACKUPDIR
fi
if [ ! -d $KEYDIR ]; then
	mkdir -p $KEYDIR
fi

cd $MASTERDIR

_check_file()
{
	while [ "$1" != "" ]; do
		if [ ! -s "$1" ]; then
			Fatal "$1 does not exist."
		fi
		shift
	done
}

_check_nofile()
{
	while [ "$1" != "" ]; do
		if [ -f "$1" ]; then
			Fatal "$1 exist."
		fi
		shift
	done
}

Fatal()
{
	if [ "$LOCKF" != "" ]; then
		rm $LOCKF
	fi

	if [ "$FATAL_MAIL" = "" ]; then
		echo $1
		exit 1
	fi
	echo $1 | Mail -s "$1" $FATAL_MAIL
	exit 1
}

_usage()
{
	if [ "$LOCKF" != "" ]; then
		rm $LOCKF
	fi
	cat <<EOF
usage: $PROG [-s] keygen <zone>
       $PROG [-s] rmkeys <zone>
       $PROG [-s] ksk-add <zone>
       $PROG [-s] ksk-roll <zone>
       $PROG [-s] zsk-add <zone>
       $PROG [-s] zsk-roll <zone>
       $PROG [-s] zsk-rmold <zone>
       $PROG sign <zone>
       $PROG status <zone>
EOF
	exit 1
}

sign()
{
	_check_file $ZONEFILE $KSK_FILE $ZSK_FILE
	KSK=`head -1 $KSK_FILE`
	ZSK=`head -1 $ZSK_FILE`
	KSS=""
	if [ -s $KSK_S_FILE ]; then
		KSS=`head -1 $KSK_S_FILE`
	fi
	_check_file "$KEYDIR/$KSK.private" "$KEYDIR/$ZSK.private"

	LASTSERIAL=`cat $CONFIGDIR/lastserial`
	LASTDATE=`echo $LASTSERIAL | sed 's/..$//'`
	DATE=`date +%Y%m%d`
	if [ "$LASTDATE" = "$DATE" ]; then
	SERIAL=$(( $LASTSERIAL + 1 ))
		echo $SERIAL > $CONFIGDIR/lastserial
 	else
		SERIAL=`date +%Y%m%d00`
		echo $SERIAL > $CONFIGDIR/lastserial
	fi

	ZONE_PREPROCESS="sed s/_SERIAL_/$SERIAL/"
	$ZONE_PREPROCESS $ZONEFILE > $ZONEFILE.tmp

	cat $KSK_FILE $ZSK_FILE | while read keyfile
	do
		_check_file "$KEYDIR/$keyfile.key"
		cat "$KEYDIR/$keyfile.key" >> $ZONEFILE.tmp
	done
	for i in $KSK_S_FILE $ZSK_S_FILE $ZSK_R_FILE
	do
		if [ -s $i ]; then
			keyfile=`head -1 $i`
			_check_file "$KEYDIR/$keyfile.key"
			cat "$KEYDIR/$keyfile.key" >> $ZONEFILE.tmp
		fi
	done
	cmdname=`basename $signzone`
	if [ "$KSS" != "" ]; then
		KSS="$KEYDIR/$KSS"
	fi
	$signzone $_SIGN_PARAM -o $ZONE -f "$ZONEFILE.signed" $ZONEFILE.tmp $KEYDIR/$ZSK $KEYDIR/$KSK $KSS
	echo "signzone returns $?"
	rm $ZONEFILE.tmp
	eval _TWOFACE=\${TWOFACE_$ZONE_:-}
	if [ "$_TWOFACE" != "" ]; then
		_check_file $_TWOFACE
		$ZONE_PREPROCESS $_TWOFACE > $ZONEFILE.tmp
		cat $KSK_FILE $ZSK_FILE | while read keyfile
		do
			_check_file "$KEYDIR/$keyfile.key"
			cat "$KEYDIR/$keyfile.key" >> $ZONEFILE.tmp
		done
		for i in $KSK_S_FILE $ZSK_S_FILE $ZSK_R_FILE
		do
			if [ -f $i ]; then
				keyfile=`head -1 $i`
				_check_file "$KEYDIR/$keyfile.key"
				cat "$KEYDIR/$keyfile.key" >> $ZONEFILE.tmp
			fi
		done
		cmdname=`basename $signzone`
		if [ "$KSS" != "" ]; then
			KSS="$KEYDIR/$KSS"
		fi
		$signzone $_SIGN_PARAM -o $ZONE -f "$_TWOFACE.signed" $ONEFILE.tmp $KEYDIR/$ZSK $KEYDIR/$KSK $KSS
		echo "signzone returns $?"
		rm $ZONEFILE.tmp
	fi
	NEED_RELOAD=1
}

status()
{
	if [ -f $KSK_FILE ]; then
		echo -n "$ZONE's KSK = "
		cat $KSK_FILE;
		$dsfromkey $_DS_PARAM $KEYDIR/`cat $KSK_FILE`.key
	fi
	if [ -f $KSK_S_FILE ]; then
		echo -n "$ZONE's next KSK = "
		cat $KSK_S_FILE;
		$dsfromkey $_DS_PARAM $KEYDIR/`cat $KSK_S_FILE`.key
	fi
	if [ -f $ZSK_FILE ]; then
		echo -n "$ZONE's ZSK = "
		cat $ZSK_FILE;
	fi
	if [ -f $ZSK_S_FILE ]; then
		echo -n "$ZONE's next ZSK = "
		cat $ZSK_S_FILE;
	fi
	if [ -f $ZSK_R_FILE ]; then
		echo -n "$ZONE's previous ZSK = "
		cat $ZSK_R_FILE;
	fi
}

keygensub()
{
	cd $KEYDIR;
	echo "$keygen $1 $2"
	newfile="$3"
	tmpfile="$3.tmp"
	_KEY=`$keygen $1 $2`
	if [ -f $_KEY.ds ]; then
		rm $_KEY.ds
	fi
	if [ ! -s $_KEY.key ]; then
		rm $_KEY.key
		Fatal "cannot write new key: $1 $2 $3"
	fi
	echo $_KEY > $tmpfile
	read _KEY2 < $tmpfile
	if [ "$_KEY" != "$_KEY2" ]; then
		rm $tmpfile
		rm $_KEY.key
		Fatal "cannot write $tmpfile"
	fi
	mv $tmpfile $newfile
	cd $MASTERDIR
}

removekeys_sub()
{
	if [ -f $1 ]; then
		KEY=`head -1 $1`
		if [ -f $KEYDIR/$KEY.key ]; then
			mv $KEYDIR/$KEY.key $KEYDIR/$KEY.private $KEYBACKUPDIR/
		fi
	fi
}

remove_previouskey()
{
	if [ -f $ZSK_R_FILE ]; then
		removekeys_sub $ZSK_R_FILE
		mv $ZSK_R_FILE "$KEYBACKUPDIR/removed-ZSK-$NOW-$ZONE"
	fi
}

if [ "$1" = "" -o "$1" = "-h" -o "$1" = "-?" -o "$1" = "--help" ]; then
	_usage
	exit 0
elif [ "$1" = "-s" -o "$1" = "--sign" ];then
	SIGN_OPT=1
	shift
fi

CMD="$1"
shift

if [ "$1" = "" ]; then
	Fatal "A zone mut be provided."
	_usage
	exit 1
else
	ZONELIST="$*"
fi

for ZONE in $ZONELIST
do
	LOCKF="$CONFIGDIR/$ZONE.lock"
	TMPF="$CONFIGDIR/$ZONE.$$"
	OUTF="$ZONE.signed"
	KSK_FILE="$KEYDIR/$HEAD_KSKNAME$ZONE"
	ZSK_FILE="$KEYDIR/$HEAD_ZSKNAME$ZONE"
	KSK_S_FILE="$KEYDIR/$HEAD_KSSNAME$ZONE"
	ZSK_S_FILE="$KEYDIR/$HEAD_ZSSNAME$ZONE"
	ZSK_R_FILE="$KEYDIR/$HEAD_ZSRNAME$ZONE"
	ZONEFILE="$MASTERDIR/$ZONE/$ZONE"
	ZONE_=`echo $ZONE | tr .- __`
	eval _SIGN_PARAM=\${SIGN_PARAM_$ZONE_:-$SIGN_PARAM}
	eval _KSK_PARAM=\${KSK_PARAM_$ZONE_:-$KSK_PARAM}
	eval _ZSK_PARAM=\${ZSK_PARAM_$ZONE_:-$ZSK_PARAM}
	eval _DS_PARAM=\${DS_PARAM_$ZONE_:-$DS_PARAM}

	echo "LOCK$$" > $TMPF
	LOCKSTR=`cat $TMPF`
	if [ ! -f $TMPF -o "LOCK$$" != "$LOCKSTR" ]; then
		Fatal "cannot write lock file $TMPF"
	fi
	if ln $TMPF $LOCKF; then
		:
	else
		rm $TMPF
		echo "zone $ZONE locked"
		continue
	fi
	rm $TMPF
	case $CMD in
	keygen)
		_check_nofile $KSK_FILE $ZSK_FILE
		keygensub "$_KSK_PARAM" $ZONE $KSK_FILE
		keygensub "$_ZSK_PARAM" $ZONE $ZSK_FILE
		status
		;;
	rmkeys)
		removekeys_sub $KSK_FILE
		removekeys_sub $ZSK_FILE
		removekeys_sub $KSK_S_FILE
		removekeys_sub $ZSK_S_FILE
		rm $KSK_FILE $ZSK_FILE $KSK_S_FILE $ZSK_S_FILE
		status
		;;
	ksk-add)
		_check_nofile $KSK_S_FILE
		keygensub "$_KSK_PARAM" $ZONE $KSK_S_FILE
		status
		;;
	ksk-roll)
		_check_file $ZONEFILE $KSK_FILE $KSK_S_FILE
		KSK=`head -1 $KSK_FILE`
		KSS=`head -1 $KSK_S_FILE`
		_check_file $KEYDIR/$KSK.key $KEYDIR/$KSS.key $KEYDIR/$KSK.private $KEYDIR/$KSS.private
		mv $KEYDIR/$KSK.key $KEYDIR/$KSK.private $KEYBACKUPDIR/
		mv $KSK_S_FILE $KSK_FILE
		OLDKSK="$KSK"
		KSK="$KSS"
		KSS=""
		echo "$ZONE 's KSK: valid -> removed: $OLDKSK"
		echo "$ZONE 's KSK: next  -> current: $KSK"
		status
		;;
	zsk-add)
		_check_nofile $ZSK_S_FILE
		keygensub "$_ZSK_PARAM" $ZONE $ZSK_S_FILE
		status
		;;
	zsk-roll)
		_check_file $ZONEFILE $ZSK_FILE $ZSK_S_FILE
		ZSK=`head -1 $ZSK_FILE`
		ZSS=`head -1 $ZSK_S_FILE`
		_check_file $KEYDIR/$ZSK.key $KEYDIR/$ZSS.key $KEYDIR/$ZSK.private $KEYDIR/$ZSS.private
		remove_previouskey
		mv $ZSK_FILE $ZSK_R_FILE
		mv $ZSK_S_FILE $ZSK_FILE
		OLDZSK="$ZSK"
		ZSK="$ZSS"
		ZSS=""
		if [ "$PRESERVE_REMOVED_KEY" = "NO" ]; then
			remove_previouskey
		fi
		echo "$ZONE 's ZSK: valid -> previous: $OLDZSK"
		echo "$ZONE 's ZSK: next -> current: $ZSK"
		status
		;;
	zsk-rmold)
		_check_file $ZSK_R_FILE
		remove_previouskey
		status
		;;
	sign)
		sign
		;;
	status)
		status
		;;
	*)
		echo "unknown command: $CMD"
		_usage
		;;
	esac
	rm $LOCKF
done

if [ "$SIGN_OPT" = 1 ]; then
	sign
fi

if [ "$NEED_RELOAD" = 1 -a "$RELOADALL_COMMAND" != "" ]; then
	eval $RELOADALL_COMMAND
fi

exit 0
